#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace reginapractice2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="servicedb1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Insertclients(clients instance);
    partial void Updateclients(clients instance);
    partial void Deleteclients(clients instance);
    partial void Insertemployees(employees instance);
    partial void Updateemployees(employees instance);
    partial void Deleteemployees(employees instance);
    partial void Insertorders(orders instance);
    partial void Updateorders(orders instance);
    partial void Deleteorders(orders instance);
    partial void Insertservices_rendered(services_rendered instance);
    partial void Updateservices_rendered(services_rendered instance);
    partial void Deleteservices_rendered(services_rendered instance);
    partial void Insertservices(services instance);
    partial void Updateservices(services instance);
    partial void Deleteservices(services instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::reginapractice2.Properties.Settings.Default.servicedb1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<clients> clients
		{
			get
			{
				return this.GetTable<clients>();
			}
		}
		
		public System.Data.Linq.Table<employees> employees
		{
			get
			{
				return this.GetTable<employees>();
			}
		}
		
		public System.Data.Linq.Table<orders> orders
		{
			get
			{
				return this.GetTable<orders>();
			}
		}
		
		public System.Data.Linq.Table<services_rendered> services_rendered
		{
			get
			{
				return this.GetTable<services_rendered>();
			}
		}
		
		public System.Data.Linq.Table<services> services
		{
			get
			{
				return this.GetTable<services>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.clients")]
	public partial class clients : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _client_id;
		
		private string _first_name;
		
		private string _last_name;
		
		private string _phone_number;
		
		private EntitySet<orders> _orders;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onclient_idChanging(int value);
    partial void Onclient_idChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void Onphone_numberChanging(string value);
    partial void Onphone_numberChanged();
    #endregion
		
		public clients()
		{
			this._orders = new EntitySet<orders>(new Action<orders>(this.attach_orders), new Action<orders>(this.detach_orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_client_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int client_id
		{
			get
			{
				return this._client_id;
			}
			set
			{
				if ((this._client_id != value))
				{
					this.Onclient_idChanging(value);
					this.SendPropertyChanging();
					this._client_id = value;
					this.SendPropertyChanged("client_id");
					this.Onclient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="VarChar(50)")]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="VarChar(50)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone_number", DbType="VarChar(50)")]
		public string phone_number
		{
			get
			{
				return this._phone_number;
			}
			set
			{
				if ((this._phone_number != value))
				{
					this.Onphone_numberChanging(value);
					this.SendPropertyChanging();
					this._phone_number = value;
					this.SendPropertyChanged("phone_number");
					this.Onphone_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="clients_orders", Storage="_orders", ThisKey="client_id", OtherKey="client_id")]
		public EntitySet<orders> orders
		{
			get
			{
				return this._orders;
			}
			set
			{
				this._orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_orders(orders entity)
		{
			this.SendPropertyChanging();
			entity.clients = this;
		}
		
		private void detach_orders(orders entity)
		{
			this.SendPropertyChanging();
			entity.clients = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.employees")]
	public partial class employees : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _employee_id;
		
		private string _last_name;
		
		private string _first_name;
		
		private string _phone_number;
		
		private EntitySet<services_rendered> _services_rendered;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onemployee_idChanging(int value);
    partial void Onemployee_idChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onphone_numberChanging(string value);
    partial void Onphone_numberChanged();
    #endregion
		
		public employees()
		{
			this._services_rendered = new EntitySet<services_rendered>(new Action<services_rendered>(this.attach_services_rendered), new Action<services_rendered>(this.detach_services_rendered));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employee_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int employee_id
		{
			get
			{
				return this._employee_id;
			}
			set
			{
				if ((this._employee_id != value))
				{
					this.Onemployee_idChanging(value);
					this.SendPropertyChanging();
					this._employee_id = value;
					this.SendPropertyChanged("employee_id");
					this.Onemployee_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="VarChar(50)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="VarChar(50)")]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone_number", DbType="VarChar(50)")]
		public string phone_number
		{
			get
			{
				return this._phone_number;
			}
			set
			{
				if ((this._phone_number != value))
				{
					this.Onphone_numberChanging(value);
					this.SendPropertyChanging();
					this._phone_number = value;
					this.SendPropertyChanged("phone_number");
					this.Onphone_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employees_services_rendered", Storage="_services_rendered", ThisKey="employee_id", OtherKey="employee_id")]
		public EntitySet<services_rendered> services_rendered
		{
			get
			{
				return this._services_rendered;
			}
			set
			{
				this._services_rendered.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_services_rendered(services_rendered entity)
		{
			this.SendPropertyChanging();
			entity.employees = this;
		}
		
		private void detach_services_rendered(services_rendered entity)
		{
			this.SendPropertyChanging();
			entity.employees = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.orders")]
	public partial class orders : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _order_id;
		
		private int _client_id;
		
		private System.Nullable<System.DateTime> _order_date;
		
		private string _description;
		
		private string _status;
		
		private EntitySet<services_rendered> _services_rendered;
		
		private EntityRef<clients> _clients;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onorder_idChanging(int value);
    partial void Onorder_idChanged();
    partial void Onclient_idChanging(int value);
    partial void Onclient_idChanged();
    partial void Onorder_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onorder_dateChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public orders()
		{
			this._services_rendered = new EntitySet<services_rendered>(new Action<services_rendered>(this.attach_services_rendered), new Action<services_rendered>(this.detach_services_rendered));
			this._clients = default(EntityRef<clients>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_order_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int order_id
		{
			get
			{
				return this._order_id;
			}
			set
			{
				if ((this._order_id != value))
				{
					this.Onorder_idChanging(value);
					this.SendPropertyChanging();
					this._order_id = value;
					this.SendPropertyChanged("order_id");
					this.Onorder_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_client_id", DbType="Int NOT NULL")]
		public int client_id
		{
			get
			{
				return this._client_id;
			}
			set
			{
				if ((this._client_id != value))
				{
					if (this._clients.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onclient_idChanging(value);
					this.SendPropertyChanging();
					this._client_id = value;
					this.SendPropertyChanged("client_id");
					this.Onclient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_order_date", DbType="Date")]
		public System.Nullable<System.DateTime> order_date
		{
			get
			{
				return this._order_date;
			}
			set
			{
				if ((this._order_date != value))
				{
					this.Onorder_dateChanging(value);
					this.SendPropertyChanging();
					this._order_date = value;
					this.SendPropertyChanged("order_date");
					this.Onorder_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(50)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NChar(10)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="orders_services_rendered", Storage="_services_rendered", ThisKey="order_id", OtherKey="order_id")]
		public EntitySet<services_rendered> services_rendered
		{
			get
			{
				return this._services_rendered;
			}
			set
			{
				this._services_rendered.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="clients_orders", Storage="_clients", ThisKey="client_id", OtherKey="client_id", IsForeignKey=true)]
		public clients clients
		{
			get
			{
				return this._clients.Entity;
			}
			set
			{
				clients previousValue = this._clients.Entity;
				if (((previousValue != value) 
							|| (this._clients.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._clients.Entity = null;
						previousValue.orders.Remove(this);
					}
					this._clients.Entity = value;
					if ((value != null))
					{
						value.orders.Add(this);
						this._client_id = value.client_id;
					}
					else
					{
						this._client_id = default(int);
					}
					this.SendPropertyChanged("clients");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_services_rendered(services_rendered entity)
		{
			this.SendPropertyChanging();
			entity.orders = this;
		}
		
		private void detach_services_rendered(services_rendered entity)
		{
			this.SendPropertyChanging();
			entity.orders = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.services_rendered")]
	public partial class services_rendered : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _number;
		
		private int _order_id;
		
		private int _employee_id;
		
		private int _service_id;
		
		private System.DateTime _service_date;
		
		private EntityRef<employees> _employees;
		
		private EntityRef<orders> _orders;
		
		private EntityRef<services> _services;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnumberChanging(int value);
    partial void OnnumberChanged();
    partial void Onorder_idChanging(int value);
    partial void Onorder_idChanged();
    partial void Onemployee_idChanging(int value);
    partial void Onemployee_idChanged();
    partial void Onservice_idChanging(int value);
    partial void Onservice_idChanged();
    partial void Onservice_dateChanging(System.DateTime value);
    partial void Onservice_dateChanged();
    #endregion
		
		public services_rendered()
		{
			this._employees = default(EntityRef<employees>);
			this._orders = default(EntityRef<orders>);
			this._services = default(EntityRef<services>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_order_id", DbType="Int NOT NULL")]
		public int order_id
		{
			get
			{
				return this._order_id;
			}
			set
			{
				if ((this._order_id != value))
				{
					if (this._orders.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onorder_idChanging(value);
					this.SendPropertyChanging();
					this._order_id = value;
					this.SendPropertyChanged("order_id");
					this.Onorder_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employee_id", DbType="Int NOT NULL")]
		public int employee_id
		{
			get
			{
				return this._employee_id;
			}
			set
			{
				if ((this._employee_id != value))
				{
					if (this._employees.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onemployee_idChanging(value);
					this.SendPropertyChanging();
					this._employee_id = value;
					this.SendPropertyChanged("employee_id");
					this.Onemployee_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_id", DbType="Int NOT NULL")]
		public int service_id
		{
			get
			{
				return this._service_id;
			}
			set
			{
				if ((this._service_id != value))
				{
					if (this._services.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onservice_idChanging(value);
					this.SendPropertyChanging();
					this._service_id = value;
					this.SendPropertyChanged("service_id");
					this.Onservice_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_date", DbType="Date NOT NULL")]
		public System.DateTime service_date
		{
			get
			{
				return this._service_date;
			}
			set
			{
				if ((this._service_date != value))
				{
					this.Onservice_dateChanging(value);
					this.SendPropertyChanging();
					this._service_date = value;
					this.SendPropertyChanged("service_date");
					this.Onservice_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employees_services_rendered", Storage="_employees", ThisKey="employee_id", OtherKey="employee_id", IsForeignKey=true)]
		public employees employees
		{
			get
			{
				return this._employees.Entity;
			}
			set
			{
				employees previousValue = this._employees.Entity;
				if (((previousValue != value) 
							|| (this._employees.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employees.Entity = null;
						previousValue.services_rendered.Remove(this);
					}
					this._employees.Entity = value;
					if ((value != null))
					{
						value.services_rendered.Add(this);
						this._employee_id = value.employee_id;
					}
					else
					{
						this._employee_id = default(int);
					}
					this.SendPropertyChanged("employees");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="orders_services_rendered", Storage="_orders", ThisKey="order_id", OtherKey="order_id", IsForeignKey=true)]
		public orders orders
		{
			get
			{
				return this._orders.Entity;
			}
			set
			{
				orders previousValue = this._orders.Entity;
				if (((previousValue != value) 
							|| (this._orders.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._orders.Entity = null;
						previousValue.services_rendered.Remove(this);
					}
					this._orders.Entity = value;
					if ((value != null))
					{
						value.services_rendered.Add(this);
						this._order_id = value.order_id;
					}
					else
					{
						this._order_id = default(int);
					}
					this.SendPropertyChanged("orders");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="services_services_rendered", Storage="_services", ThisKey="service_id", OtherKey="service_id", IsForeignKey=true)]
		public services services
		{
			get
			{
				return this._services.Entity;
			}
			set
			{
				services previousValue = this._services.Entity;
				if (((previousValue != value) 
							|| (this._services.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._services.Entity = null;
						previousValue.services_rendered.Remove(this);
					}
					this._services.Entity = value;
					if ((value != null))
					{
						value.services_rendered.Add(this);
						this._service_id = value.service_id;
					}
					else
					{
						this._service_id = default(int);
					}
					this.SendPropertyChanged("services");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.services")]
	public partial class services : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _service_id;
		
		private string _service_name;
		
		private System.Nullable<int> _cost;
		
		private EntitySet<services_rendered> _services_rendered;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onservice_idChanging(int value);
    partial void Onservice_idChanged();
    partial void Onservice_nameChanging(string value);
    partial void Onservice_nameChanged();
    partial void OncostChanging(System.Nullable<int> value);
    partial void OncostChanged();
    #endregion
		
		public services()
		{
			this._services_rendered = new EntitySet<services_rendered>(new Action<services_rendered>(this.attach_services_rendered), new Action<services_rendered>(this.detach_services_rendered));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int service_id
		{
			get
			{
				return this._service_id;
			}
			set
			{
				if ((this._service_id != value))
				{
					this.Onservice_idChanging(value);
					this.SendPropertyChanging();
					this._service_id = value;
					this.SendPropertyChanged("service_id");
					this.Onservice_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_name", DbType="NChar(20)")]
		public string service_name
		{
			get
			{
				return this._service_name;
			}
			set
			{
				if ((this._service_name != value))
				{
					this.Onservice_nameChanging(value);
					this.SendPropertyChanging();
					this._service_name = value;
					this.SendPropertyChanged("service_name");
					this.Onservice_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cost", DbType="Int")]
		public System.Nullable<int> cost
		{
			get
			{
				return this._cost;
			}
			set
			{
				if ((this._cost != value))
				{
					this.OncostChanging(value);
					this.SendPropertyChanging();
					this._cost = value;
					this.SendPropertyChanged("cost");
					this.OncostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="services_services_rendered", Storage="_services_rendered", ThisKey="service_id", OtherKey="service_id")]
		public EntitySet<services_rendered> services_rendered
		{
			get
			{
				return this._services_rendered;
			}
			set
			{
				this._services_rendered.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_services_rendered(services_rendered entity)
		{
			this.SendPropertyChanging();
			entity.services = this;
		}
		
		private void detach_services_rendered(services_rendered entity)
		{
			this.SendPropertyChanging();
			entity.services = null;
		}
	}
}
#pragma warning restore 1591
